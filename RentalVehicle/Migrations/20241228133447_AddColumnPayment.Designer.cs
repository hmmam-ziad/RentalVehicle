// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RentalVehicle.Data;

#nullable disable

namespace RentalVehicle.Migrations
{
    [DbContext(typeof(RentalDbContext))]
    [Migration("20241228133447_AddColumnPayment")]
    partial class AddColumnPayment
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RentalVehicle.Models.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerID"));

                    b.Property<string>("ContactInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DriverLicenseNumber")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("CustomerID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("RentalVehicle.Models.FuleTypes", b =>
                {
                    b.Property<int>("FuleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FuleID"));

                    b.Property<string>("FuleType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FuleID");

                    b.ToTable("FuleTypes");
                });

            modelBuilder.Entity("RentalVehicle.Models.Maintenance", b =>
                {
                    b.Property<int>("MaintenanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaintenanceID"));

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("MaintenanceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MaintenanceType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("VehicleID")
                        .HasColumnType("int");

                    b.HasKey("MaintenanceID");

                    b.HasIndex("VehicleID");

                    b.ToTable("Maintenances");
                });

            modelBuilder.Entity("RentalVehicle.Models.RentalBooking", b =>
                {
                    b.Property<int>("BookingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingID"));

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<string>("DropoffLocation")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("InitialCheckNotes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("InitialRentalDays")
                        .HasColumnType("int");

                    b.Property<decimal?>("InitialTotalDueAmount")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PickupLocation")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("RentalEndDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("RentalPricePerDay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("RentalStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("VehicleID")
                        .HasColumnType("int");

                    b.HasKey("BookingID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("VehicleID");

                    b.ToTable("RentalBookings");
                });

            modelBuilder.Entity("RentalVehicle.Models.RentalTransaction", b =>
                {
                    b.Property<int>("TransactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionID"));

                    b.Property<decimal>("ActualTotalDueAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BookingID")
                        .HasColumnType("int");

                    b.Property<string>("PaymentDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalRefundedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalRemaining")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("TransactionDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedTransactionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TransactionID");

                    b.HasIndex("BookingID")
                        .IsUnique();

                    b.ToTable("RentalTransactions");
                });

            modelBuilder.Entity("RentalVehicle.Models.Vehicle", b =>
                {
                    b.Property<int>("VehicleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleID"));

                    b.Property<int>("CarCategoryID")
                        .HasColumnType("int");

                    b.Property<int>("FuleTypeID")
                        .HasColumnType("int");

                    b.Property<bool>("ISAvailabelForRent")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Mileage")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PlateNumber")
                        .HasColumnType("int");

                    b.Property<decimal>("RentalPricePerDay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SeatsCount")
                        .HasColumnType("int");

                    b.Property<string>("TransmissionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Year")
                        .HasColumnType("datetime2");

                    b.HasKey("VehicleID");

                    b.HasIndex("CarCategoryID");

                    b.HasIndex("FuleTypeID");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("RentalVehicle.Models.VehicleCategories", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("RentalVehicle.Models.VehicleReturn", b =>
                {
                    b.Property<int>("ReturnID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReturnID"));

                    b.Property<int>("ActualRentalDays")
                        .HasColumnType("int");

                    b.Property<DateTime>("ActualReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ActualTotalDueAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AdditionalCharges")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ConsumedMileage")
                        .HasColumnType("int");

                    b.Property<string>("FinalCheckNotes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Mileage")
                        .HasColumnType("int");

                    b.Property<int>("TransactionID")
                        .HasColumnType("int");

                    b.HasKey("ReturnID");

                    b.HasIndex("TransactionID")
                        .IsUnique();

                    b.ToTable("VehicleReturns");
                });

            modelBuilder.Entity("RentalVehicle.Models.Maintenance", b =>
                {
                    b.HasOne("RentalVehicle.Models.Vehicle", "Vehicle")
                        .WithMany("Maintenances")
                        .HasForeignKey("VehicleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("RentalVehicle.Models.RentalBooking", b =>
                {
                    b.HasOne("RentalVehicle.Models.Customer", "Customer")
                        .WithMany("RentalBooking")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentalVehicle.Models.Vehicle", "Vehicles")
                        .WithMany()
                        .HasForeignKey("VehicleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("RentalVehicle.Models.RentalTransaction", b =>
                {
                    b.HasOne("RentalVehicle.Models.RentalBooking", "RentalBooking")
                        .WithOne("RentalTransaction")
                        .HasForeignKey("RentalVehicle.Models.RentalTransaction", "BookingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RentalBooking");
                });

            modelBuilder.Entity("RentalVehicle.Models.Vehicle", b =>
                {
                    b.HasOne("RentalVehicle.Models.VehicleCategories", "VehicleCategories")
                        .WithMany("Vehicles")
                        .HasForeignKey("CarCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RentalVehicle.Models.FuleTypes", "FuleType")
                        .WithMany("Vehicles")
                        .HasForeignKey("FuleTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FuleType");

                    b.Navigation("VehicleCategories");
                });

            modelBuilder.Entity("RentalVehicle.Models.VehicleReturn", b =>
                {
                    b.HasOne("RentalVehicle.Models.RentalTransaction", "RentalTransaction")
                        .WithOne("VehicleReturn")
                        .HasForeignKey("RentalVehicle.Models.VehicleReturn", "TransactionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RentalTransaction");
                });

            modelBuilder.Entity("RentalVehicle.Models.Customer", b =>
                {
                    b.Navigation("RentalBooking");
                });

            modelBuilder.Entity("RentalVehicle.Models.FuleTypes", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("RentalVehicle.Models.RentalBooking", b =>
                {
                    b.Navigation("RentalTransaction");
                });

            modelBuilder.Entity("RentalVehicle.Models.RentalTransaction", b =>
                {
                    b.Navigation("VehicleReturn");
                });

            modelBuilder.Entity("RentalVehicle.Models.Vehicle", b =>
                {
                    b.Navigation("Maintenances");
                });

            modelBuilder.Entity("RentalVehicle.Models.VehicleCategories", b =>
                {
                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
